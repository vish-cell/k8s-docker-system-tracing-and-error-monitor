{"ast":null,"code":"import React,{useState}from'react';/*\n  Simple UI to generate a conceptual Kubernetes NetworkPolicy YAML snippet that\n  blocks egress to a list of domains/IPs. In real deployments you'd convert\n  domains to IPs and apply policies or use egress gateways.\n*/import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function C2PolicyGenerator(){const[items,setItems]=useState(['badc2.example','203.0.113.11']);const[policyName,setPolicyName]=useState('block-c2-egress');function addItem(){setItems([...items,'']);}function updateItem(i,v){const c=[...items];c[i]=v;setItems(c);}function removeItem(i){setItems(items.filter((_,j)=>j!==i));}function generate(){// Note: NetworkPolicy egress works by IP/CIDR — this is conceptual.\nconst yaml=\"apiVersion: networking.k8s.io/v1\\nkind: NetworkPolicy\\nmetadata:\\n  name: \".concat(policyName,\"\\nspec:\\n  podSelector: {}\\n  policyTypes:\\n  - Egress\\n  egress:\\n  - to:\\n\").concat(items.map(it=>\"    - ipBlock:\\n        cidr: \".concat(it)).join('\\n'),\"\\n\");return yaml;}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Policy name: \",/*#__PURE__*/_jsx(\"input\",{value:policyName,onChange:e=>setPolicyName(e.target.value)})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Block list (domains or IPs)\"}),items.map((it,i)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{value:it,onChange:e=>updateItem(i,e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>removeItem(i),children:\"Remove\"})]},i)),/*#__PURE__*/_jsx(\"button\",{onClick:addItem,children:\"Add\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Generated YAML (conceptual)\"}),/*#__PURE__*/_jsx(\"pre\",{style:{background:'#eee',padding:10,whiteSpace:'pre-wrap'},children:generate()})]});}","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","C2PolicyGenerator","items","setItems","policyName","setPolicyName","addItem","updateItem","i","v","c","removeItem","filter","_","j","generate","yaml","concat","map","it","join","children","value","onChange","e","target","onClick","style","background","padding","whiteSpace"],"sources":["C:/Users/visha/Desktop/TARP-3/ui/src/C2PolicyGenerator.jsx"],"sourcesContent":["import React, {useState} from 'react';\n\n/*\n  Simple UI to generate a conceptual Kubernetes NetworkPolicy YAML snippet that\n  blocks egress to a list of domains/IPs. In real deployments you'd convert\n  domains to IPs and apply policies or use egress gateways.\n*/\nexport default function C2PolicyGenerator(){\n  const [items, setItems] = useState(['badc2.example','203.0.113.11']);\n  const [policyName, setPolicyName] = useState('block-c2-egress');\n  function addItem(){ setItems([...items, '']); }\n  function updateItem(i, v){ const c = [...items]; c[i]=v; setItems(c); }\n  function removeItem(i){ setItems(items.filter((_,j)=>j!==i)); }\n  function generate(){\n    // Note: NetworkPolicy egress works by IP/CIDR — this is conceptual.\n    const yaml = `apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: ${policyName}\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  - to:\n${items.map(it=>`    - ipBlock:\\n        cidr: ${it}`).join('\\n')}\n`;\n    return yaml;\n  }\n  return (\n    <div>\n      <label>Policy name: <input value={policyName} onChange={e=>setPolicyName(e.target.value)} /></label>\n      <h3>Block list (domains or IPs)</h3>\n      {items.map((it,i)=>(\n        <div key={i}>\n          <input value={it} onChange={e=>updateItem(i,e.target.value)} />\n          <button onClick={()=>removeItem(i)}>Remove</button>\n        </div>\n      ))}\n      <button onClick={addItem}>Add</button>\n      <h3>Generated YAML (conceptual)</h3>\n      <pre style={{background:'#eee',padding:10,whiteSpace:'pre-wrap'}}>{generate()}</pre>\n    </div>\n  );\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,QAAQ,KAAO,OAAO,CAErC;AACA;AACA;AACA;AACA,EAJA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAKA,cAAe,SAAS,CAAAC,iBAAiBA,CAAA,CAAE,CACzC,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGP,QAAQ,CAAC,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CACpE,KAAM,CAACQ,UAAU,CAAEC,aAAa,CAAC,CAAGT,QAAQ,CAAC,iBAAiB,CAAC,CAC/D,QAAS,CAAAU,OAAOA,CAAA,CAAE,CAAEH,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAE,EAAE,CAAC,CAAC,CAAE,CAC9C,QAAS,CAAAK,UAAUA,CAACC,CAAC,CAAEC,CAAC,CAAC,CAAE,KAAM,CAAAC,CAAC,CAAG,CAAC,GAAGR,KAAK,CAAC,CAAEQ,CAAC,CAACF,CAAC,CAAC,CAACC,CAAC,CAAEN,QAAQ,CAACO,CAAC,CAAC,CAAE,CACtE,QAAS,CAAAC,UAAUA,CAACH,CAAC,CAAC,CAAEL,QAAQ,CAACD,KAAK,CAACU,MAAM,CAAC,CAACC,CAAC,CAACC,CAAC,GAAGA,CAAC,GAAGN,CAAC,CAAC,CAAC,CAAE,CAC9D,QAAS,CAAAO,QAAQA,CAAA,CAAE,CACjB;AACA,KAAM,CAAAC,IAAI,8EAAAC,MAAA,CAGJb,UAAU,iFAAAa,MAAA,CAOlBf,KAAK,CAACgB,GAAG,CAACC,EAAE,mCAAAF,MAAA,CAAmCE,EAAE,CAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,MAChE,CACG,MAAO,CAAAJ,IAAI,CACb,CACA,mBACEhB,KAAA,QAAAqB,QAAA,eACErB,KAAA,UAAAqB,QAAA,EAAO,eAAa,cAAAvB,IAAA,UAAOwB,KAAK,CAAElB,UAAW,CAACmB,QAAQ,CAAEC,CAAC,EAAEnB,aAAa,CAACmB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAE,CAAC,EAAO,CAAC,cACpGxB,IAAA,OAAAuB,QAAA,CAAI,6BAA2B,CAAI,CAAC,CACnCnB,KAAK,CAACgB,GAAG,CAAC,CAACC,EAAE,CAACX,CAAC,gBACdR,KAAA,QAAAqB,QAAA,eACEvB,IAAA,UAAOwB,KAAK,CAAEH,EAAG,CAACI,QAAQ,CAAEC,CAAC,EAAEjB,UAAU,CAACC,CAAC,CAACgB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAE,CAAC,cAC/DxB,IAAA,WAAQ4B,OAAO,CAAEA,CAAA,GAAIf,UAAU,CAACH,CAAC,CAAE,CAAAa,QAAA,CAAC,QAAM,CAAQ,CAAC,GAF3Cb,CAGL,CACN,CAAC,cACFV,IAAA,WAAQ4B,OAAO,CAAEpB,OAAQ,CAAAe,QAAA,CAAC,KAAG,CAAQ,CAAC,cACtCvB,IAAA,OAAAuB,QAAA,CAAI,6BAA2B,CAAI,CAAC,cACpCvB,IAAA,QAAK6B,KAAK,CAAE,CAACC,UAAU,CAAC,MAAM,CAACC,OAAO,CAAC,EAAE,CAACC,UAAU,CAAC,UAAU,CAAE,CAAAT,QAAA,CAAEN,QAAQ,CAAC,CAAC,CAAM,CAAC,EACjF,CAAC,CAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}